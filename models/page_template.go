// Code generated by BobGen sqlite v0.25.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/im"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
)

// PageTemplate is an object representing the database table.
type PageTemplate struct {
	ID        int32            `db:"id,pk" `
	Name      string           `db:"name" `
	Structure null.Val[string] `db:"structure" `
	CreatedAt time.Time        `db:"created_at" `
	UpdatedAt time.Time        `db:"updated_at" `
}

// PageTemplateSlice is an alias for a slice of pointers to PageTemplate.
// This should almost always be used instead of []*PageTemplate.
type PageTemplateSlice []*PageTemplate

// PageTemplates contains methods to work with the page_template table
var PageTemplates = sqlite.NewTablex[*PageTemplate, PageTemplateSlice, *PageTemplateSetter]("", "page_template")

// PageTemplatesQuery is a query on the page_template table
type PageTemplatesQuery = *sqlite.ViewQuery[*PageTemplate, PageTemplateSlice]

// PageTemplatesStmt is a prepared statment on page_template
type PageTemplatesStmt = bob.QueryStmt[*PageTemplate, PageTemplateSlice]

// PageTemplateSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type PageTemplateSetter struct {
	ID        omit.Val[int32]      `db:"id,pk"`
	Name      omit.Val[string]     `db:"name"`
	Structure omitnull.Val[string] `db:"structure"`
	CreatedAt omit.Val[time.Time]  `db:"created_at"`
	UpdatedAt omit.Val[time.Time]  `db:"updated_at"`
}

func (s PageTemplateSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}

	if !s.Structure.IsUnset() {
		vals = append(vals, "structure")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s PageTemplateSetter) Overwrite(t *PageTemplate) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Name.IsUnset() {
		t.Name, _ = s.Name.Get()
	}
	if !s.Structure.IsUnset() {
		t.Structure, _ = s.Structure.GetNull()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s PageTemplateSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 0, 5)
	if !s.ID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ID))
	}

	if !s.Name.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Name))
	}

	if !s.Structure.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Structure))
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, sqlite.Arg(s.CreatedAt))
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, sqlite.Arg(s.UpdatedAt))
	}

	return im.Values(vals...)
}

func (s PageTemplateSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s PageTemplateSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "name")...),
			sqlite.Arg(s.Name),
		}})
	}

	if !s.Structure.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "structure")...),
			sqlite.Arg(s.Structure),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "created_at")...),
			sqlite.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "updated_at")...),
			sqlite.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

type pageTemplateColumnNames struct {
	ID        string
	Name      string
	Structure string
	CreatedAt string
	UpdatedAt string
}

var PageTemplateColumns = struct {
	ID        sqlite.Expression
	Name      sqlite.Expression
	Structure sqlite.Expression
	CreatedAt sqlite.Expression
	UpdatedAt sqlite.Expression
}{
	ID:        sqlite.Quote("page_template", "id"),
	Name:      sqlite.Quote("page_template", "name"),
	Structure: sqlite.Quote("page_template", "structure"),
	CreatedAt: sqlite.Quote("page_template", "created_at"),
	UpdatedAt: sqlite.Quote("page_template", "updated_at"),
}

type pageTemplateWhere[Q sqlite.Filterable] struct {
	ID        sqlite.WhereMod[Q, int32]
	Name      sqlite.WhereMod[Q, string]
	Structure sqlite.WhereNullMod[Q, string]
	CreatedAt sqlite.WhereMod[Q, time.Time]
	UpdatedAt sqlite.WhereMod[Q, time.Time]
}

func PageTemplateWhere[Q sqlite.Filterable]() pageTemplateWhere[Q] {
	return pageTemplateWhere[Q]{
		ID:        sqlite.Where[Q, int32](PageTemplateColumns.ID),
		Name:      sqlite.Where[Q, string](PageTemplateColumns.Name),
		Structure: sqlite.WhereNull[Q, string](PageTemplateColumns.Structure),
		CreatedAt: sqlite.Where[Q, time.Time](PageTemplateColumns.CreatedAt),
		UpdatedAt: sqlite.Where[Q, time.Time](PageTemplateColumns.UpdatedAt),
	}
}

// FindPageTemplate retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindPageTemplate(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*PageTemplate, error) {
	if len(cols) == 0 {
		return PageTemplates.Query(
			ctx, exec,
			SelectWhere.PageTemplates.ID.EQ(IDPK),
		).One()
	}

	return PageTemplates.Query(
		ctx, exec,
		SelectWhere.PageTemplates.ID.EQ(IDPK),
		sm.Columns(PageTemplates.Columns().Only(cols...)),
	).One()
}

// PageTemplateExists checks the presence of a single record by primary key
func PageTemplateExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return PageTemplates.Query(
		ctx, exec,
		SelectWhere.PageTemplates.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the PageTemplate
func (o *PageTemplate) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

// Update uses an executor to update the PageTemplate
func (o *PageTemplate) Update(ctx context.Context, exec bob.Executor, s *PageTemplateSetter) error {
	return PageTemplates.Update(ctx, exec, s, o)
}

// Delete deletes a single PageTemplate record with an executor
func (o *PageTemplate) Delete(ctx context.Context, exec bob.Executor) error {
	return PageTemplates.Delete(ctx, exec, o)
}

// Reload refreshes the PageTemplate using the executor
func (o *PageTemplate) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := PageTemplates.Query(
		ctx, exec,
		SelectWhere.PageTemplates.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

func (o PageTemplateSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals PageTemplateSetter) error {
	return PageTemplates.Update(ctx, exec, &vals, o...)
}

func (o PageTemplateSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return PageTemplates.Delete(ctx, exec, o...)
}

func (o PageTemplateSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]int32, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.PageTemplates.ID.In(IDPK...),
	)

	o2, err := PageTemplates.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}

			*old = *new
			break
		}
	}

	return nil
}

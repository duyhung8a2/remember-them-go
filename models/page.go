// Code generated by BobGen sqlite v0.25.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/im"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Page is an object representing the database table.
type Page struct {
	ID        int32           `db:"id,pk" `
	Title     string          `db:"title" `
	UserID    int32           `db:"user_id" `
	ParentID  null.Val[int32] `db:"parent_id" `
	CreatedAt time.Time       `db:"created_at" `
	UpdatedAt time.Time       `db:"updated_at" `

	R pageR `db:"-" `
}

// PageSlice is an alias for a slice of pointers to Page.
// This should almost always be used instead of []*Page.
type PageSlice []*Page

// Pages contains methods to work with the page table
var Pages = sqlite.NewTablex[*Page, PageSlice, *PageSetter]("", "page")

// PagesQuery is a query on the page table
type PagesQuery = *sqlite.ViewQuery[*Page, PageSlice]

// PagesStmt is a prepared statment on page
type PagesStmt = bob.QueryStmt[*Page, PageSlice]

// pageR is where relationships are stored.
type pageR struct {
	Blocks         BlockSlice        // fk_block_0
	User           *User             // fk_page_0
	Parent         *Page             // fk_page_1
	ReverseParents PageSlice         // fk_page_1__self_join_reverse
	PageProperties PagePropertySlice // fk_page_property_0
}

// PageSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type PageSetter struct {
	ID        omit.Val[int32]     `db:"id,pk"`
	Title     omit.Val[string]    `db:"title"`
	UserID    omit.Val[int32]     `db:"user_id"`
	ParentID  omitnull.Val[int32] `db:"parent_id"`
	CreatedAt omit.Val[time.Time] `db:"created_at"`
	UpdatedAt omit.Val[time.Time] `db:"updated_at"`
}

func (s PageSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.Title.IsUnset() {
		vals = append(vals, "title")
	}

	if !s.UserID.IsUnset() {
		vals = append(vals, "user_id")
	}

	if !s.ParentID.IsUnset() {
		vals = append(vals, "parent_id")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s PageSetter) Overwrite(t *Page) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.Title.IsUnset() {
		t.Title, _ = s.Title.Get()
	}
	if !s.UserID.IsUnset() {
		t.UserID, _ = s.UserID.Get()
	}
	if !s.ParentID.IsUnset() {
		t.ParentID, _ = s.ParentID.GetNull()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s PageSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 0, 6)
	if !s.ID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ID))
	}

	if !s.Title.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Title))
	}

	if !s.UserID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.UserID))
	}

	if !s.ParentID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ParentID))
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, sqlite.Arg(s.CreatedAt))
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, sqlite.Arg(s.UpdatedAt))
	}

	return im.Values(vals...)
}

func (s PageSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s PageSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if !s.Title.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "title")...),
			sqlite.Arg(s.Title),
		}})
	}

	if !s.UserID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "user_id")...),
			sqlite.Arg(s.UserID),
		}})
	}

	if !s.ParentID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "parent_id")...),
			sqlite.Arg(s.ParentID),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "created_at")...),
			sqlite.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "updated_at")...),
			sqlite.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

type pageColumnNames struct {
	ID        string
	Title     string
	UserID    string
	ParentID  string
	CreatedAt string
	UpdatedAt string
}

type pageRelationshipJoins[Q dialect.Joinable] struct {
	Blocks         bob.Mod[Q]
	User           bob.Mod[Q]
	Parent         bob.Mod[Q]
	ReverseParents bob.Mod[Q]
	PageProperties bob.Mod[Q]
}

func buildPageRelationshipJoins[Q dialect.Joinable](ctx context.Context, typ string) pageRelationshipJoins[Q] {
	return pageRelationshipJoins[Q]{
		Blocks:         pagesJoinBlocks[Q](ctx, typ),
		User:           pagesJoinUser[Q](ctx, typ),
		Parent:         pagesJoinParent[Q](ctx, typ),
		ReverseParents: pagesJoinReverseParents[Q](ctx, typ),
		PageProperties: pagesJoinPageProperties[Q](ctx, typ),
	}
}

func pagesJoin[Q dialect.Joinable](ctx context.Context) joinSet[pageRelationshipJoins[Q]] {
	return joinSet[pageRelationshipJoins[Q]]{
		InnerJoin: buildPageRelationshipJoins[Q](ctx, clause.InnerJoin),
		LeftJoin:  buildPageRelationshipJoins[Q](ctx, clause.LeftJoin),
		RightJoin: buildPageRelationshipJoins[Q](ctx, clause.RightJoin),
	}
}

var PageColumns = struct {
	ID        sqlite.Expression
	Title     sqlite.Expression
	UserID    sqlite.Expression
	ParentID  sqlite.Expression
	CreatedAt sqlite.Expression
	UpdatedAt sqlite.Expression
}{
	ID:        sqlite.Quote("page", "id"),
	Title:     sqlite.Quote("page", "title"),
	UserID:    sqlite.Quote("page", "user_id"),
	ParentID:  sqlite.Quote("page", "parent_id"),
	CreatedAt: sqlite.Quote("page", "created_at"),
	UpdatedAt: sqlite.Quote("page", "updated_at"),
}

type pageWhere[Q sqlite.Filterable] struct {
	ID        sqlite.WhereMod[Q, int32]
	Title     sqlite.WhereMod[Q, string]
	UserID    sqlite.WhereMod[Q, int32]
	ParentID  sqlite.WhereNullMod[Q, int32]
	CreatedAt sqlite.WhereMod[Q, time.Time]
	UpdatedAt sqlite.WhereMod[Q, time.Time]
}

func PageWhere[Q sqlite.Filterable]() pageWhere[Q] {
	return pageWhere[Q]{
		ID:        sqlite.Where[Q, int32](PageColumns.ID),
		Title:     sqlite.Where[Q, string](PageColumns.Title),
		UserID:    sqlite.Where[Q, int32](PageColumns.UserID),
		ParentID:  sqlite.WhereNull[Q, int32](PageColumns.ParentID),
		CreatedAt: sqlite.Where[Q, time.Time](PageColumns.CreatedAt),
		UpdatedAt: sqlite.Where[Q, time.Time](PageColumns.UpdatedAt),
	}
}

// FindPage retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindPage(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*Page, error) {
	if len(cols) == 0 {
		return Pages.Query(
			ctx, exec,
			SelectWhere.Pages.ID.EQ(IDPK),
		).One()
	}

	return Pages.Query(
		ctx, exec,
		SelectWhere.Pages.ID.EQ(IDPK),
		sm.Columns(Pages.Columns().Only(cols...)),
	).One()
}

// PageExists checks the presence of a single record by primary key
func PageExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return Pages.Query(
		ctx, exec,
		SelectWhere.Pages.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Page
func (o *Page) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

// Update uses an executor to update the Page
func (o *Page) Update(ctx context.Context, exec bob.Executor, s *PageSetter) error {
	return Pages.Update(ctx, exec, s, o)
}

// Delete deletes a single Page record with an executor
func (o *Page) Delete(ctx context.Context, exec bob.Executor) error {
	return Pages.Delete(ctx, exec, o)
}

// Reload refreshes the Page using the executor
func (o *Page) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Pages.Query(
		ctx, exec,
		SelectWhere.Pages.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o PageSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals PageSetter) error {
	return Pages.Update(ctx, exec, &vals, o...)
}

func (o PageSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Pages.Delete(ctx, exec, o...)
}

func (o PageSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]int32, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Pages.ID.In(IDPK...),
	)

	o2, err := Pages.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func pagesJoinBlocks[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Blocks.NameAs(ctx)).On(
			BlockColumns.PageID.EQ(PageColumns.ID),
		),
	}
}

func pagesJoinUser[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Users.NameAs(ctx)).On(
			UserColumns.ID.EQ(PageColumns.UserID),
		),
	}
}

func pagesJoinParent[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Pages.NameAs(ctx)).On(
			PageColumns.ID.EQ(PageColumns.ParentID),
		),
	}
}

func pagesJoinReverseParents[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Pages.NameAs(ctx)).On(
			PageColumns.ParentID.EQ(PageColumns.ID),
		),
	}
}

func pagesJoinPageProperties[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, PageProperties.NameAs(ctx)).On(
			PagePropertyColumns.PageID.EQ(PageColumns.ID),
		),
	}
}

// Blocks starts a query for related objects on block
func (o *Page) Blocks(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) BlocksQuery {
	return Blocks.Query(ctx, exec, append(mods,
		sm.Where(BlockColumns.PageID.EQ(sqlite.Arg(o.ID))),
	)...)
}

func (os PageSlice) Blocks(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) BlocksQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.ID)
	}

	return Blocks.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(BlockColumns.PageID).In(PKArgs...)),
	)...)
}

// User starts a query for related objects on user
func (o *Page) User(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(ctx, exec, append(mods,
		sm.Where(UserColumns.ID.EQ(sqlite.Arg(o.UserID))),
	)...)
}

func (os PageSlice) User(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.UserID)
	}

	return Users.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(UserColumns.ID).In(PKArgs...)),
	)...)
}

// Parent starts a query for related objects on page
func (o *Page) Parent(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) PagesQuery {
	return Pages.Query(ctx, exec, append(mods,
		sm.Where(PageColumns.ID.EQ(sqlite.Arg(o.ParentID))),
	)...)
}

func (os PageSlice) Parent(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) PagesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.ParentID)
	}

	return Pages.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(PageColumns.ID).In(PKArgs...)),
	)...)
}

// ReverseParents starts a query for related objects on page
func (o *Page) ReverseParents(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) PagesQuery {
	return Pages.Query(ctx, exec, append(mods,
		sm.Where(PageColumns.ParentID.EQ(sqlite.Arg(o.ID))),
	)...)
}

func (os PageSlice) ReverseParents(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) PagesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.ID)
	}

	return Pages.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(PageColumns.ParentID).In(PKArgs...)),
	)...)
}

// PageProperties starts a query for related objects on page_property
func (o *Page) PageProperties(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) PagePropertiesQuery {
	return PageProperties.Query(ctx, exec, append(mods,
		sm.Where(PagePropertyColumns.PageID.EQ(sqlite.Arg(o.ID))),
	)...)
}

func (os PageSlice) PageProperties(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) PagePropertiesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.ID)
	}

	return PageProperties.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(PagePropertyColumns.PageID).In(PKArgs...)),
	)...)
}

func (o *Page) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Blocks":
		rels, ok := retrieved.(BlockSlice)
		if !ok {
			return fmt.Errorf("page cannot load %T as %q", retrieved, name)
		}

		o.R.Blocks = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Page = o
			}
		}
		return nil
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("page cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.Pages = PageSlice{o}
		}
		return nil
	case "Parent":
		rel, ok := retrieved.(*Page)
		if !ok {
			return fmt.Errorf("page cannot load %T as %q", retrieved, name)
		}

		o.R.Parent = rel

		if rel != nil {
			rel.R.Parent = o
		}
		return nil
	case "ReverseParents":
		rels, ok := retrieved.(PageSlice)
		if !ok {
			return fmt.Errorf("page cannot load %T as %q", retrieved, name)
		}

		o.R.ReverseParents = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.ReverseParents = PageSlice{o}
			}
		}
		return nil
	case "PageProperties":
		rels, ok := retrieved.(PagePropertySlice)
		if !ok {
			return fmt.Errorf("page cannot load %T as %q", retrieved, name)
		}

		o.R.PageProperties = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Page = o
			}
		}
		return nil
	default:
		return fmt.Errorf("page has no relationship %q", name)
	}
}

func ThenLoadPageBlocks(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadPageBlocks(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load PageBlocks", retrieved)
		}

		err := loader.LoadPageBlocks(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadPageBlocks loads the page's Blocks into the .R struct
func (o *Page) LoadPageBlocks(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Blocks = nil

	related, err := o.Blocks(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Page = o
	}

	o.R.Blocks = related
	return nil
}

// LoadPageBlocks loads the page's Blocks into the .R struct
func (os PageSlice) LoadPageBlocks(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	blocks, err := os.Blocks(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Blocks = nil
	}

	for _, o := range os {
		for _, rel := range blocks {
			if o.ID != rel.PageID {
				continue
			}

			rel.R.Page = o

			o.R.Blocks = append(o.R.Blocks, rel)
		}
	}

	return nil
}

func PreloadPageUser(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*User, UserSlice](orm.Relationship{
		Name: "User",
		Sides: []orm.RelSide{
			{
				From: "page",
				To:   TableNames.Users,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Users.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Pages.UserID,
				},
				ToColumns: []string{
					ColumnNames.Users.ID,
				},
			},
		},
	}, Users.Columns().Names(), opts...)
}

func ThenLoadPageUser(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadPageUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load PageUser", retrieved)
		}

		err := loader.LoadPageUser(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadPageUser loads the page's User into the .R struct
func (o *Page) LoadPageUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.Pages = PageSlice{o}

	o.R.User = related
	return nil
}

// LoadPageUser loads the page's User into the .R struct
func (os PageSlice) LoadPageUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			rel.R.Pages = append(rel.R.Pages, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func PreloadPageParent(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*Page, PageSlice](orm.Relationship{
		Name: "Parent",
		Sides: []orm.RelSide{
			{
				From: "page",
				To:   TableNames.Pages,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Pages.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Pages.ParentID,
				},
				ToColumns: []string{
					ColumnNames.Pages.ID,
				},
			},
		},
	}, Pages.Columns().Names(), opts...)
}

func ThenLoadPageParent(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadPageParent(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load PageParent", retrieved)
		}

		err := loader.LoadPageParent(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadPageParent loads the page's Parent into the .R struct
func (o *Page) LoadPageParent(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Parent = nil

	related, err := o.Parent(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.Parent = o

	o.R.Parent = related
	return nil
}

// LoadPageParent loads the page's Parent into the .R struct
func (os PageSlice) LoadPageParent(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	pages, err := os.Parent(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range pages {
			if o.ParentID.GetOrZero() != rel.ID {
				continue
			}

			rel.R.Parent = o

			o.R.Parent = rel
			break
		}
	}

	return nil
}

func ThenLoadPageReverseParents(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadPageReverseParents(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load PageReverseParents", retrieved)
		}

		err := loader.LoadPageReverseParents(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadPageReverseParents loads the page's ReverseParents into the .R struct
func (o *Page) LoadPageReverseParents(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.ReverseParents = nil

	related, err := o.ReverseParents(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.ReverseParents = PageSlice{o}
	}

	o.R.ReverseParents = related
	return nil
}

// LoadPageReverseParents loads the page's ReverseParents into the .R struct
func (os PageSlice) LoadPageReverseParents(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	pages, err := os.ReverseParents(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.ReverseParents = nil
	}

	for _, o := range os {
		for _, rel := range pages {
			if o.ID != rel.ParentID.GetOrZero() {
				continue
			}

			rel.R.ReverseParents = append(rel.R.ReverseParents, o)

			o.R.ReverseParents = append(o.R.ReverseParents, rel)
		}
	}

	return nil
}

func ThenLoadPagePageProperties(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadPagePageProperties(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load PagePageProperties", retrieved)
		}

		err := loader.LoadPagePageProperties(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadPagePageProperties loads the page's PageProperties into the .R struct
func (o *Page) LoadPagePageProperties(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.PageProperties = nil

	related, err := o.PageProperties(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Page = o
	}

	o.R.PageProperties = related
	return nil
}

// LoadPagePageProperties loads the page's PageProperties into the .R struct
func (os PageSlice) LoadPagePageProperties(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	pageProperties, err := os.PageProperties(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.PageProperties = nil
	}

	for _, o := range os {
		for _, rel := range pageProperties {
			if o.ID != rel.PageID {
				continue
			}

			rel.R.Page = o

			o.R.PageProperties = append(o.R.PageProperties, rel)
		}
	}

	return nil
}

func insertPageBlocks0(ctx context.Context, exec bob.Executor, blocks1 []*BlockSetter, page0 *Page) (BlockSlice, error) {
	for i := range blocks1 {
		blocks1[i].PageID = omit.From(page0.ID)
	}

	ret, err := Blocks.InsertMany(ctx, exec, blocks1...)
	if err != nil {
		return ret, fmt.Errorf("insertPageBlocks0: %w", err)
	}

	return ret, nil
}

func attachPageBlocks0(ctx context.Context, exec bob.Executor, count int, blocks1 BlockSlice, page0 *Page) (BlockSlice, error) {
	setter := &BlockSetter{
		PageID: omit.From(page0.ID),
	}

	err := Blocks.Update(ctx, exec, setter, blocks1...)
	if err != nil {
		return nil, fmt.Errorf("attachPageBlocks0: %w", err)
	}

	return blocks1, nil
}

func (page0 *Page) InsertBlocks(ctx context.Context, exec bob.Executor, related ...*BlockSetter) error {
	if len(related) == 0 {
		return nil
	}

	blocks1, err := insertPageBlocks0(ctx, exec, related, page0)
	if err != nil {
		return err
	}

	page0.R.Blocks = append(page0.R.Blocks, blocks1...)

	for _, rel := range blocks1 {
		rel.R.Page = page0
	}
	return nil
}

func (page0 *Page) AttachBlocks(ctx context.Context, exec bob.Executor, related ...*Block) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	blocks1 := BlockSlice(related)

	_, err = attachPageBlocks0(ctx, exec, len(related), blocks1, page0)
	if err != nil {
		return err
	}

	page0.R.Blocks = append(page0.R.Blocks, blocks1...)

	for _, rel := range related {
		rel.R.Page = page0
	}

	return nil
}

func attachPageUser0(ctx context.Context, exec bob.Executor, count int, page0 *Page, user1 *User) (*Page, error) {
	setter := &PageSetter{
		UserID: omit.From(user1.ID),
	}

	err := Pages.Update(ctx, exec, setter, page0)
	if err != nil {
		return nil, fmt.Errorf("attachPageUser0: %w", err)
	}

	return page0, nil
}

func (page0 *Page) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachPageUser0(ctx, exec, 1, page0, user1)
	if err != nil {
		return err
	}

	page0.R.User = user1

	user1.R.Pages = append(user1.R.Pages, page0)

	return nil
}

func (page0 *Page) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachPageUser0(ctx, exec, 1, page0, user1)
	if err != nil {
		return err
	}

	page0.R.User = user1

	user1.R.Pages = append(user1.R.Pages, page0)

	return nil
}

func attachPageParent0(ctx context.Context, exec bob.Executor, count int, page0 *Page, page1 *Page) (*Page, error) {
	setter := &PageSetter{
		ParentID: omitnull.From(page1.ID),
	}

	err := Pages.Update(ctx, exec, setter, page0)
	if err != nil {
		return nil, fmt.Errorf("attachPageParent0: %w", err)
	}

	return page0, nil
}

func (page0 *Page) InsertParent(ctx context.Context, exec bob.Executor, related *PageSetter) error {
	page1, err := Pages.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachPageParent0(ctx, exec, 1, page0, page1)
	if err != nil {
		return err
	}

	page0.R.Parent = page1

	page1.R.Parent = page0

	return nil
}

func (page0 *Page) AttachParent(ctx context.Context, exec bob.Executor, page1 *Page) error {
	var err error

	_, err = attachPageParent0(ctx, exec, 1, page0, page1)
	if err != nil {
		return err
	}

	page0.R.Parent = page1

	page1.R.Parent = page0

	return nil
}

func insertPageReverseParents0(ctx context.Context, exec bob.Executor, pages1 []*PageSetter, page0 *Page) (PageSlice, error) {
	for i := range pages1 {
		pages1[i].ParentID = omitnull.From(page0.ID)
	}

	ret, err := Pages.InsertMany(ctx, exec, pages1...)
	if err != nil {
		return ret, fmt.Errorf("insertPageReverseParents0: %w", err)
	}

	return ret, nil
}

func attachPageReverseParents0(ctx context.Context, exec bob.Executor, count int, pages1 PageSlice, page0 *Page) (PageSlice, error) {
	setter := &PageSetter{
		ParentID: omitnull.From(page0.ID),
	}

	err := Pages.Update(ctx, exec, setter, pages1...)
	if err != nil {
		return nil, fmt.Errorf("attachPageReverseParents0: %w", err)
	}

	return pages1, nil
}

func (page0 *Page) InsertReverseParents(ctx context.Context, exec bob.Executor, related ...*PageSetter) error {
	if len(related) == 0 {
		return nil
	}

	pages1, err := insertPageReverseParents0(ctx, exec, related, page0)
	if err != nil {
		return err
	}

	page0.R.ReverseParents = append(page0.R.ReverseParents, pages1...)

	for _, rel := range pages1 {
		rel.R.ReverseParents = append(rel.R.ReverseParents, page0)
	}
	return nil
}

func (page0 *Page) AttachReverseParents(ctx context.Context, exec bob.Executor, related ...*Page) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	pages1 := PageSlice(related)

	_, err = attachPageReverseParents0(ctx, exec, len(related), pages1, page0)
	if err != nil {
		return err
	}

	page0.R.ReverseParents = append(page0.R.ReverseParents, pages1...)

	for _, rel := range related {
		rel.R.ReverseParents = append(rel.R.ReverseParents, page0)
	}

	return nil
}

func insertPagePageProperties0(ctx context.Context, exec bob.Executor, pageProperties1 []*PagePropertySetter, page0 *Page) (PagePropertySlice, error) {
	for i := range pageProperties1 {
		pageProperties1[i].PageID = omit.From(page0.ID)
	}

	ret, err := PageProperties.InsertMany(ctx, exec, pageProperties1...)
	if err != nil {
		return ret, fmt.Errorf("insertPagePageProperties0: %w", err)
	}

	return ret, nil
}

func attachPagePageProperties0(ctx context.Context, exec bob.Executor, count int, pageProperties1 PagePropertySlice, page0 *Page) (PagePropertySlice, error) {
	setter := &PagePropertySetter{
		PageID: omit.From(page0.ID),
	}

	err := PageProperties.Update(ctx, exec, setter, pageProperties1...)
	if err != nil {
		return nil, fmt.Errorf("attachPagePageProperties0: %w", err)
	}

	return pageProperties1, nil
}

func (page0 *Page) InsertPageProperties(ctx context.Context, exec bob.Executor, related ...*PagePropertySetter) error {
	if len(related) == 0 {
		return nil
	}

	pageProperties1, err := insertPagePageProperties0(ctx, exec, related, page0)
	if err != nil {
		return err
	}

	page0.R.PageProperties = append(page0.R.PageProperties, pageProperties1...)

	for _, rel := range pageProperties1 {
		rel.R.Page = page0
	}
	return nil
}

func (page0 *Page) AttachPageProperties(ctx context.Context, exec bob.Executor, related ...*PageProperty) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	pageProperties1 := PagePropertySlice(related)

	_, err = attachPagePageProperties0(ctx, exec, len(related), pageProperties1, page0)
	if err != nil {
		return err
	}

	page0.R.PageProperties = append(page0.R.PageProperties, pageProperties1...)

	for _, rel := range related {
		rel.R.Page = page0
	}

	return nil
}

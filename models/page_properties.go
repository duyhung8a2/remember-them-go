// Code generated by BobGen sqlite v0.25.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/im"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// PageProperty is an object representing the database table.
type PageProperty struct {
	ID        int32               `db:"id,pk" `
	PageID    int32               `db:"page_id" `
	Name      string              `db:"name" `
	Value     null.Val[string]    `db:"value" `
	CreatedAt null.Val[time.Time] `db:"created_at" `
	UpdatedAt null.Val[time.Time] `db:"updated_at" `

	R pagePropertyR `db:"-" `
}

// PagePropertySlice is an alias for a slice of pointers to PageProperty.
// This should almost always be used instead of []*PageProperty.
type PagePropertySlice []*PageProperty

// PageProperties contains methods to work with the page_properties table
var PageProperties = sqlite.NewTablex[*PageProperty, PagePropertySlice, *PagePropertySetter]("", "page_properties")

// PagePropertiesQuery is a query on the page_properties table
type PagePropertiesQuery = *sqlite.ViewQuery[*PageProperty, PagePropertySlice]

// PagePropertiesStmt is a prepared statment on page_properties
type PagePropertiesStmt = bob.QueryStmt[*PageProperty, PagePropertySlice]

// pagePropertyR is where relationships are stored.
type pagePropertyR struct {
	Page *Page // fk_page_properties_0
}

// PagePropertySetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type PagePropertySetter struct {
	ID        omit.Val[int32]         `db:"id,pk"`
	PageID    omit.Val[int32]         `db:"page_id"`
	Name      omit.Val[string]        `db:"name"`
	Value     omitnull.Val[string]    `db:"value"`
	CreatedAt omitnull.Val[time.Time] `db:"created_at"`
	UpdatedAt omitnull.Val[time.Time] `db:"updated_at"`
}

func (s PagePropertySetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.PageID.IsUnset() {
		vals = append(vals, "page_id")
	}

	if !s.Name.IsUnset() {
		vals = append(vals, "name")
	}

	if !s.Value.IsUnset() {
		vals = append(vals, "value")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s PagePropertySetter) Overwrite(t *PageProperty) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.PageID.IsUnset() {
		t.PageID, _ = s.PageID.Get()
	}
	if !s.Name.IsUnset() {
		t.Name, _ = s.Name.Get()
	}
	if !s.Value.IsUnset() {
		t.Value, _ = s.Value.GetNull()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.GetNull()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.GetNull()
	}
}

func (s PagePropertySetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 0, 6)
	if !s.ID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ID))
	}

	if !s.PageID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.PageID))
	}

	if !s.Name.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Name))
	}

	if !s.Value.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Value))
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, sqlite.Arg(s.CreatedAt))
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, sqlite.Arg(s.UpdatedAt))
	}

	return im.Values(vals...)
}

func (s PagePropertySetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s PagePropertySetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if !s.PageID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "page_id")...),
			sqlite.Arg(s.PageID),
		}})
	}

	if !s.Name.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "name")...),
			sqlite.Arg(s.Name),
		}})
	}

	if !s.Value.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "value")...),
			sqlite.Arg(s.Value),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "created_at")...),
			sqlite.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "updated_at")...),
			sqlite.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

type pagePropertyColumnNames struct {
	ID        string
	PageID    string
	Name      string
	Value     string
	CreatedAt string
	UpdatedAt string
}

type pagePropertyRelationshipJoins[Q dialect.Joinable] struct {
	Page bob.Mod[Q]
}

func buildPagePropertyRelationshipJoins[Q dialect.Joinable](ctx context.Context, typ string) pagePropertyRelationshipJoins[Q] {
	return pagePropertyRelationshipJoins[Q]{
		Page: pagePropertiesJoinPage[Q](ctx, typ),
	}
}

func pagePropertiesJoin[Q dialect.Joinable](ctx context.Context) joinSet[pagePropertyRelationshipJoins[Q]] {
	return joinSet[pagePropertyRelationshipJoins[Q]]{
		InnerJoin: buildPagePropertyRelationshipJoins[Q](ctx, clause.InnerJoin),
		LeftJoin:  buildPagePropertyRelationshipJoins[Q](ctx, clause.LeftJoin),
		RightJoin: buildPagePropertyRelationshipJoins[Q](ctx, clause.RightJoin),
	}
}

var PagePropertyColumns = struct {
	ID        sqlite.Expression
	PageID    sqlite.Expression
	Name      sqlite.Expression
	Value     sqlite.Expression
	CreatedAt sqlite.Expression
	UpdatedAt sqlite.Expression
}{
	ID:        sqlite.Quote("page_properties", "id"),
	PageID:    sqlite.Quote("page_properties", "page_id"),
	Name:      sqlite.Quote("page_properties", "name"),
	Value:     sqlite.Quote("page_properties", "value"),
	CreatedAt: sqlite.Quote("page_properties", "created_at"),
	UpdatedAt: sqlite.Quote("page_properties", "updated_at"),
}

type pagePropertyWhere[Q sqlite.Filterable] struct {
	ID        sqlite.WhereMod[Q, int32]
	PageID    sqlite.WhereMod[Q, int32]
	Name      sqlite.WhereMod[Q, string]
	Value     sqlite.WhereNullMod[Q, string]
	CreatedAt sqlite.WhereNullMod[Q, time.Time]
	UpdatedAt sqlite.WhereNullMod[Q, time.Time]
}

func PagePropertyWhere[Q sqlite.Filterable]() pagePropertyWhere[Q] {
	return pagePropertyWhere[Q]{
		ID:        sqlite.Where[Q, int32](PagePropertyColumns.ID),
		PageID:    sqlite.Where[Q, int32](PagePropertyColumns.PageID),
		Name:      sqlite.Where[Q, string](PagePropertyColumns.Name),
		Value:     sqlite.WhereNull[Q, string](PagePropertyColumns.Value),
		CreatedAt: sqlite.WhereNull[Q, time.Time](PagePropertyColumns.CreatedAt),
		UpdatedAt: sqlite.WhereNull[Q, time.Time](PagePropertyColumns.UpdatedAt),
	}
}

// FindPageProperty retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindPageProperty(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*PageProperty, error) {
	if len(cols) == 0 {
		return PageProperties.Query(
			ctx, exec,
			SelectWhere.PageProperties.ID.EQ(IDPK),
		).One()
	}

	return PageProperties.Query(
		ctx, exec,
		SelectWhere.PageProperties.ID.EQ(IDPK),
		sm.Columns(PageProperties.Columns().Only(cols...)),
	).One()
}

// PagePropertyExists checks the presence of a single record by primary key
func PagePropertyExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return PageProperties.Query(
		ctx, exec,
		SelectWhere.PageProperties.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the PageProperty
func (o *PageProperty) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

// Update uses an executor to update the PageProperty
func (o *PageProperty) Update(ctx context.Context, exec bob.Executor, s *PagePropertySetter) error {
	return PageProperties.Update(ctx, exec, s, o)
}

// Delete deletes a single PageProperty record with an executor
func (o *PageProperty) Delete(ctx context.Context, exec bob.Executor) error {
	return PageProperties.Delete(ctx, exec, o)
}

// Reload refreshes the PageProperty using the executor
func (o *PageProperty) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := PageProperties.Query(
		ctx, exec,
		SelectWhere.PageProperties.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o PagePropertySlice) UpdateAll(ctx context.Context, exec bob.Executor, vals PagePropertySetter) error {
	return PageProperties.Update(ctx, exec, &vals, o...)
}

func (o PagePropertySlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return PageProperties.Delete(ctx, exec, o...)
}

func (o PagePropertySlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]int32, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.PageProperties.ID.In(IDPK...),
	)

	o2, err := PageProperties.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func pagePropertiesJoinPage[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Pages.NameAs(ctx)).On(
			PageColumns.ID.EQ(PagePropertyColumns.PageID),
		),
	}
}

// Page starts a query for related objects on pages
func (o *PageProperty) Page(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) PagesQuery {
	return Pages.Query(ctx, exec, append(mods,
		sm.Where(PageColumns.ID.EQ(sqlite.Arg(o.PageID))),
	)...)
}

func (os PagePropertySlice) Page(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) PagesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.PageID)
	}

	return Pages.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(PageColumns.ID).In(PKArgs...)),
	)...)
}

func (o *PageProperty) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Page":
		rel, ok := retrieved.(*Page)
		if !ok {
			return fmt.Errorf("pageProperty cannot load %T as %q", retrieved, name)
		}

		o.R.Page = rel

		if rel != nil {
			rel.R.PageProperties = PagePropertySlice{o}
		}
		return nil
	default:
		return fmt.Errorf("pageProperty has no relationship %q", name)
	}
}

func PreloadPagePropertyPage(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*Page, PageSlice](orm.Relationship{
		Name: "Page",
		Sides: []orm.RelSide{
			{
				From: "page_properties",
				To:   TableNames.Pages,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Pages.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.PageProperties.PageID,
				},
				ToColumns: []string{
					ColumnNames.Pages.ID,
				},
			},
		},
	}, Pages.Columns().Names(), opts...)
}

func ThenLoadPagePropertyPage(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadPagePropertyPage(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load PagePropertyPage", retrieved)
		}

		err := loader.LoadPagePropertyPage(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadPagePropertyPage loads the pageProperty's Page into the .R struct
func (o *PageProperty) LoadPagePropertyPage(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Page = nil

	related, err := o.Page(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.PageProperties = PagePropertySlice{o}

	o.R.Page = related
	return nil
}

// LoadPagePropertyPage loads the pageProperty's Page into the .R struct
func (os PagePropertySlice) LoadPagePropertyPage(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	pages, err := os.Page(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range pages {
			if o.PageID != rel.ID {
				continue
			}

			rel.R.PageProperties = append(rel.R.PageProperties, o)

			o.R.Page = rel
			break
		}
	}

	return nil
}

func attachPagePropertyPage0(ctx context.Context, exec bob.Executor, count int, pageProperty0 *PageProperty, page1 *Page) (*PageProperty, error) {
	setter := &PagePropertySetter{
		PageID: omit.From(page1.ID),
	}

	err := PageProperties.Update(ctx, exec, setter, pageProperty0)
	if err != nil {
		return nil, fmt.Errorf("attachPagePropertyPage0: %w", err)
	}

	return pageProperty0, nil
}

func (pageProperty0 *PageProperty) InsertPage(ctx context.Context, exec bob.Executor, related *PageSetter) error {
	page1, err := Pages.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachPagePropertyPage0(ctx, exec, 1, pageProperty0, page1)
	if err != nil {
		return err
	}

	pageProperty0.R.Page = page1

	page1.R.PageProperties = append(page1.R.PageProperties, pageProperty0)

	return nil
}

func (pageProperty0 *PageProperty) AttachPage(ctx context.Context, exec bob.Executor, page1 *Page) error {
	var err error

	_, err = attachPagePropertyPage0(ctx, exec, 1, pageProperty0, page1)
	if err != nil {
		return err
	}

	pageProperty0.R.Page = page1

	page1.R.PageProperties = append(page1.R.PageProperties, pageProperty0)

	return nil
}

// Code generated by BobGen sqlite v0.25.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "remember_them/models"
)

type BlockMod interface {
	Apply(*BlockTemplate)
}

type BlockModFunc func(*BlockTemplate)

func (f BlockModFunc) Apply(n *BlockTemplate) {
	f(n)
}

type BlockModSlice []BlockMod

func (mods BlockModSlice) Apply(n *BlockTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// BlockTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type BlockTemplate struct {
	ID        func() int32
	PageID    func() int32
	Type      func() string
	Content   func() null.Val[string]
	Position  func() int32
	CreatedAt func() time.Time
	UpdatedAt func() time.Time

	r blockR
	f *Factory
}

type blockR struct {
	Page *blockRPageR
}

type blockRPageR struct {
	o *PageTemplate
}

// Apply mods to the BlockTemplate
func (o *BlockTemplate) Apply(mods ...BlockMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.Block
// this does nothing with the relationship templates
func (o BlockTemplate) toModel() *models.Block {
	m := &models.Block{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.PageID != nil {
		m.PageID = o.PageID()
	}
	if o.Type != nil {
		m.Type = o.Type()
	}
	if o.Content != nil {
		m.Content = o.Content()
	}
	if o.Position != nil {
		m.Position = o.Position()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.BlockSlice
// this does nothing with the relationship templates
func (o BlockTemplate) toModels(number int) models.BlockSlice {
	m := make(models.BlockSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.Block
// according to the relationships in the template. Nothing is inserted into the db
func (t BlockTemplate) setModelRels(o *models.Block) {
	if t.r.Page != nil {
		rel := t.r.Page.o.toModel()
		rel.R.Blocks = append(rel.R.Blocks, o)
		o.PageID = rel.ID
		o.R.Page = rel
	}
}

// BuildSetter returns an *models.BlockSetter
// this does nothing with the relationship templates
func (o BlockTemplate) BuildSetter() *models.BlockSetter {
	m := &models.BlockSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.PageID != nil {
		m.PageID = omit.From(o.PageID())
	}
	if o.Type != nil {
		m.Type = omit.From(o.Type())
	}
	if o.Content != nil {
		m.Content = omitnull.FromNull(o.Content())
	}
	if o.Position != nil {
		m.Position = omit.From(o.Position())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omit.From(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omit.From(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.BlockSetter
// this does nothing with the relationship templates
func (o BlockTemplate) BuildManySetter(number int) []*models.BlockSetter {
	m := make([]*models.BlockSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.Block
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use BlockTemplate.Create
func (o BlockTemplate) Build() *models.Block {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.BlockSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use BlockTemplate.CreateMany
func (o BlockTemplate) BuildMany(number int) models.BlockSlice {
	m := make(models.BlockSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatableBlock(m *models.BlockSetter) {
	if m.PageID.IsUnset() {
		m.PageID = omit.From(random[int32](nil))
	}
	if m.Type.IsUnset() {
		m.Type = omit.From(random[string](nil))
	}
	if m.Position.IsUnset() {
		m.Position = omit.From(random[int32](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.Block
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *BlockTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.Block) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a block and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *BlockTemplate) Create(ctx context.Context, exec bob.Executor) (*models.Block, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a block and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *BlockTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.Block, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatableBlock(opt)

	var rel0 *models.Page
	if o.r.Page == nil {
		var ok bool
		rel0, ok = pageCtx.Value(ctx)
		if !ok {
			BlockMods.WithNewPage().Apply(o)
		}
	}
	if o.r.Page != nil {
		ctx, rel0, err = o.r.Page.o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}
	opt.PageID = omit.From(rel0.ID)

	m, err := models.Blocks.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = blockCtx.WithValue(ctx, m)

	m.R.Page = rel0

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple blocks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o BlockTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.BlockSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple blocks and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o BlockTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.BlockSlice, error) {
	var err error
	m := make(models.BlockSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// Block has methods that act as mods for the BlockTemplate
var BlockMods blockMods

type blockMods struct{}

func (m blockMods) RandomizeAllColumns(f *faker.Faker) BlockMod {
	return BlockModSlice{
		BlockMods.RandomID(f),
		BlockMods.RandomPageID(f),
		BlockMods.RandomType(f),
		BlockMods.RandomContent(f),
		BlockMods.RandomPosition(f),
		BlockMods.RandomCreatedAt(f),
		BlockMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m blockMods) ID(val int32) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.ID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m blockMods) IDFunc(f func() int32) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m blockMods) UnsetID() BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m blockMods) RandomID(f *faker.Faker) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.ID = func() int32 {
			return random[int32](f)
		}
	})
}

func (m blockMods) ensureID(f *faker.Faker) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() int32 {
			return random[int32](f)
		}
	})
}

// Set the model columns to this value
func (m blockMods) PageID(val int32) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.PageID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m blockMods) PageIDFunc(f func() int32) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.PageID = f
	})
}

// Clear any values for the column
func (m blockMods) UnsetPageID() BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.PageID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m blockMods) RandomPageID(f *faker.Faker) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.PageID = func() int32 {
			return random[int32](f)
		}
	})
}

func (m blockMods) ensurePageID(f *faker.Faker) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		if o.PageID != nil {
			return
		}

		o.PageID = func() int32 {
			return random[int32](f)
		}
	})
}

// Set the model columns to this value
func (m blockMods) Type(val string) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.Type = func() string { return val }
	})
}

// Set the Column from the function
func (m blockMods) TypeFunc(f func() string) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.Type = f
	})
}

// Clear any values for the column
func (m blockMods) UnsetType() BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.Type = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m blockMods) RandomType(f *faker.Faker) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.Type = func() string {
			return random[string](f)
		}
	})
}

func (m blockMods) ensureType(f *faker.Faker) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		if o.Type != nil {
			return
		}

		o.Type = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m blockMods) Content(val null.Val[string]) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.Content = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m blockMods) ContentFunc(f func() null.Val[string]) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.Content = f
	})
}

// Clear any values for the column
func (m blockMods) UnsetContent() BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.Content = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m blockMods) RandomContent(f *faker.Faker) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.Content = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m blockMods) ensureContent(f *faker.Faker) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		if o.Content != nil {
			return
		}

		o.Content = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m blockMods) Position(val int32) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.Position = func() int32 { return val }
	})
}

// Set the Column from the function
func (m blockMods) PositionFunc(f func() int32) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.Position = f
	})
}

// Clear any values for the column
func (m blockMods) UnsetPosition() BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.Position = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m blockMods) RandomPosition(f *faker.Faker) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.Position = func() int32 {
			return random[int32](f)
		}
	})
}

func (m blockMods) ensurePosition(f *faker.Faker) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		if o.Position != nil {
			return
		}

		o.Position = func() int32 {
			return random[int32](f)
		}
	})
}

// Set the model columns to this value
func (m blockMods) CreatedAt(val time.Time) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.CreatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m blockMods) CreatedAtFunc(f func() time.Time) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m blockMods) UnsetCreatedAt() BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m blockMods) RandomCreatedAt(f *faker.Faker) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.CreatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

func (m blockMods) ensureCreatedAt(f *faker.Faker) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		if o.CreatedAt != nil {
			return
		}

		o.CreatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

// Set the model columns to this value
func (m blockMods) UpdatedAt(val time.Time) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.UpdatedAt = func() time.Time { return val }
	})
}

// Set the Column from the function
func (m blockMods) UpdatedAtFunc(f func() time.Time) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m blockMods) UnsetUpdatedAt() BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m blockMods) RandomUpdatedAt(f *faker.Faker) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.UpdatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

func (m blockMods) ensureUpdatedAt(f *faker.Faker) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		if o.UpdatedAt != nil {
			return
		}

		o.UpdatedAt = func() time.Time {
			return random[time.Time](f)
		}
	})
}

func (m blockMods) WithPage(rel *PageTemplate) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.r.Page = &blockRPageR{
			o: rel,
		}
	})
}

func (m blockMods) WithNewPage(mods ...PageMod) BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		related := o.f.NewPage(mods...)

		m.WithPage(related).Apply(o)
	})
}

func (m blockMods) WithoutPage() BlockMod {
	return BlockModFunc(func(o *BlockTemplate) {
		o.r.Page = nil
	})
}

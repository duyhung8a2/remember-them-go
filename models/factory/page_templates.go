// Code generated by BobGen sqlite v0.25.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package factory

import (
	"context"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/jaswdr/faker/v2"
	"github.com/stephenafamo/bob"
	models "remember_them/models"
)

type PageTemplateMod interface {
	Apply(*PageTemplateTemplate)
}

type PageTemplateModFunc func(*PageTemplateTemplate)

func (f PageTemplateModFunc) Apply(n *PageTemplateTemplate) {
	f(n)
}

type PageTemplateModSlice []PageTemplateMod

func (mods PageTemplateModSlice) Apply(n *PageTemplateTemplate) {
	for _, f := range mods {
		f.Apply(n)
	}
}

// PageTemplateTemplate is an object representing the database table.
// all columns are optional and should be set by mods
type PageTemplateTemplate struct {
	ID        func() int32
	Name      func() string
	Structure func() null.Val[string]
	CreatedAt func() null.Val[time.Time]
	UpdatedAt func() null.Val[time.Time]

	f *Factory
}

// Apply mods to the PageTemplateTemplate
func (o *PageTemplateTemplate) Apply(mods ...PageTemplateMod) {
	for _, mod := range mods {
		mod.Apply(o)
	}
}

// toModel returns an *models.PageTemplate
// this does nothing with the relationship templates
func (o PageTemplateTemplate) toModel() *models.PageTemplate {
	m := &models.PageTemplate{}

	if o.ID != nil {
		m.ID = o.ID()
	}
	if o.Name != nil {
		m.Name = o.Name()
	}
	if o.Structure != nil {
		m.Structure = o.Structure()
	}
	if o.CreatedAt != nil {
		m.CreatedAt = o.CreatedAt()
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = o.UpdatedAt()
	}

	return m
}

// toModels returns an models.PageTemplateSlice
// this does nothing with the relationship templates
func (o PageTemplateTemplate) toModels(number int) models.PageTemplateSlice {
	m := make(models.PageTemplateSlice, number)

	for i := range m {
		m[i] = o.toModel()
	}

	return m
}

// setModelRels creates and sets the relationships on *models.PageTemplate
// according to the relationships in the template. Nothing is inserted into the db
func (t PageTemplateTemplate) setModelRels(o *models.PageTemplate) {}

// BuildSetter returns an *models.PageTemplateSetter
// this does nothing with the relationship templates
func (o PageTemplateTemplate) BuildSetter() *models.PageTemplateSetter {
	m := &models.PageTemplateSetter{}

	if o.ID != nil {
		m.ID = omit.From(o.ID())
	}
	if o.Name != nil {
		m.Name = omit.From(o.Name())
	}
	if o.Structure != nil {
		m.Structure = omitnull.FromNull(o.Structure())
	}
	if o.CreatedAt != nil {
		m.CreatedAt = omitnull.FromNull(o.CreatedAt())
	}
	if o.UpdatedAt != nil {
		m.UpdatedAt = omitnull.FromNull(o.UpdatedAt())
	}

	return m
}

// BuildManySetter returns an []*models.PageTemplateSetter
// this does nothing with the relationship templates
func (o PageTemplateTemplate) BuildManySetter(number int) []*models.PageTemplateSetter {
	m := make([]*models.PageTemplateSetter, number)

	for i := range m {
		m[i] = o.BuildSetter()
	}

	return m
}

// Build returns an *models.PageTemplate
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use PageTemplateTemplate.Create
func (o PageTemplateTemplate) Build() *models.PageTemplate {
	m := o.toModel()
	o.setModelRels(m)

	return m
}

// BuildMany returns an models.PageTemplateSlice
// Related objects are also created and placed in the .R field
// NOTE: Objects are not inserted into the database. Use PageTemplateTemplate.CreateMany
func (o PageTemplateTemplate) BuildMany(number int) models.PageTemplateSlice {
	m := make(models.PageTemplateSlice, number)

	for i := range m {
		m[i] = o.Build()
	}

	return m
}

func ensureCreatablePageTemplate(m *models.PageTemplateSetter) {
	if m.Name.IsUnset() {
		m.Name = omit.From(random[string](nil))
	}
}

// insertOptRels creates and inserts any optional the relationships on *models.PageTemplate
// according to the relationships in the template.
// any required relationship should have already exist on the model
func (o *PageTemplateTemplate) insertOptRels(ctx context.Context, exec bob.Executor, m *models.PageTemplate) (context.Context, error) {
	var err error

	return ctx, err
}

// Create builds a pageTemplate and inserts it into the database
// Relations objects are also inserted and placed in the .R field
func (o *PageTemplateTemplate) Create(ctx context.Context, exec bob.Executor) (*models.PageTemplate, error) {
	_, m, err := o.create(ctx, exec)
	return m, err
}

// create builds a pageTemplate and inserts it into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted model
func (o *PageTemplateTemplate) create(ctx context.Context, exec bob.Executor) (context.Context, *models.PageTemplate, error) {
	var err error
	opt := o.BuildSetter()
	ensureCreatablePageTemplate(opt)

	m, err := models.PageTemplates.Insert(ctx, exec, opt)
	if err != nil {
		return ctx, nil, err
	}
	ctx = pageTemplateCtx.WithValue(ctx, m)

	ctx, err = o.insertOptRels(ctx, exec, m)
	return ctx, m, err
}

// CreateMany builds multiple pageTemplates and inserts them into the database
// Relations objects are also inserted and placed in the .R field
func (o PageTemplateTemplate) CreateMany(ctx context.Context, exec bob.Executor, number int) (models.PageTemplateSlice, error) {
	_, m, err := o.createMany(ctx, exec, number)
	return m, err
}

// createMany builds multiple pageTemplates and inserts them into the database
// Relations objects are also inserted and placed in the .R field
// this returns a context that includes the newly inserted models
func (o PageTemplateTemplate) createMany(ctx context.Context, exec bob.Executor, number int) (context.Context, models.PageTemplateSlice, error) {
	var err error
	m := make(models.PageTemplateSlice, number)

	for i := range m {
		ctx, m[i], err = o.create(ctx, exec)
		if err != nil {
			return ctx, nil, err
		}
	}

	return ctx, m, nil
}

// PageTemplate has methods that act as mods for the PageTemplateTemplate
var PageTemplateMods pageTemplateMods

type pageTemplateMods struct{}

func (m pageTemplateMods) RandomizeAllColumns(f *faker.Faker) PageTemplateMod {
	return PageTemplateModSlice{
		PageTemplateMods.RandomID(f),
		PageTemplateMods.RandomName(f),
		PageTemplateMods.RandomStructure(f),
		PageTemplateMods.RandomCreatedAt(f),
		PageTemplateMods.RandomUpdatedAt(f),
	}
}

// Set the model columns to this value
func (m pageTemplateMods) ID(val int32) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.ID = func() int32 { return val }
	})
}

// Set the Column from the function
func (m pageTemplateMods) IDFunc(f func() int32) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.ID = f
	})
}

// Clear any values for the column
func (m pageTemplateMods) UnsetID() PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.ID = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m pageTemplateMods) RandomID(f *faker.Faker) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.ID = func() int32 {
			return random[int32](f)
		}
	})
}

func (m pageTemplateMods) ensureID(f *faker.Faker) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		if o.ID != nil {
			return
		}

		o.ID = func() int32 {
			return random[int32](f)
		}
	})
}

// Set the model columns to this value
func (m pageTemplateMods) Name(val string) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.Name = func() string { return val }
	})
}

// Set the Column from the function
func (m pageTemplateMods) NameFunc(f func() string) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.Name = f
	})
}

// Clear any values for the column
func (m pageTemplateMods) UnsetName() PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.Name = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m pageTemplateMods) RandomName(f *faker.Faker) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.Name = func() string {
			return random[string](f)
		}
	})
}

func (m pageTemplateMods) ensureName(f *faker.Faker) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		if o.Name != nil {
			return
		}

		o.Name = func() string {
			return random[string](f)
		}
	})
}

// Set the model columns to this value
func (m pageTemplateMods) Structure(val null.Val[string]) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.Structure = func() null.Val[string] { return val }
	})
}

// Set the Column from the function
func (m pageTemplateMods) StructureFunc(f func() null.Val[string]) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.Structure = f
	})
}

// Clear any values for the column
func (m pageTemplateMods) UnsetStructure() PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.Structure = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m pageTemplateMods) RandomStructure(f *faker.Faker) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.Structure = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

func (m pageTemplateMods) ensureStructure(f *faker.Faker) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		if o.Structure != nil {
			return
		}

		o.Structure = func() null.Val[string] {
			return randomNull[string](f)
		}
	})
}

// Set the model columns to this value
func (m pageTemplateMods) CreatedAt(val null.Val[time.Time]) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.CreatedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m pageTemplateMods) CreatedAtFunc(f func() null.Val[time.Time]) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.CreatedAt = f
	})
}

// Clear any values for the column
func (m pageTemplateMods) UnsetCreatedAt() PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.CreatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m pageTemplateMods) RandomCreatedAt(f *faker.Faker) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.CreatedAt = func() null.Val[time.Time] {
			return randomNull[time.Time](f)
		}
	})
}

func (m pageTemplateMods) ensureCreatedAt(f *faker.Faker) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		if o.CreatedAt != nil {
			return
		}

		o.CreatedAt = func() null.Val[time.Time] {
			return randomNull[time.Time](f)
		}
	})
}

// Set the model columns to this value
func (m pageTemplateMods) UpdatedAt(val null.Val[time.Time]) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] { return val }
	})
}

// Set the Column from the function
func (m pageTemplateMods) UpdatedAtFunc(f func() null.Val[time.Time]) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.UpdatedAt = f
	})
}

// Clear any values for the column
func (m pageTemplateMods) UnsetUpdatedAt() PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.UpdatedAt = nil
	})
}

// Generates a random value for the column using the given faker
// if faker is nil, a default faker is used
func (m pageTemplateMods) RandomUpdatedAt(f *faker.Faker) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		o.UpdatedAt = func() null.Val[time.Time] {
			return randomNull[time.Time](f)
		}
	})
}

func (m pageTemplateMods) ensureUpdatedAt(f *faker.Faker) PageTemplateMod {
	return PageTemplateModFunc(func(o *PageTemplateTemplate) {
		if o.UpdatedAt != nil {
			return
		}

		o.UpdatedAt = func() null.Val[time.Time] {
			return randomNull[time.Time](f)
		}
	})
}

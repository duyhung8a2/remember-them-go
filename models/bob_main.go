// Code generated by BobGen sqlite v0.25.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"

	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
)

var TableNames = struct {
	Blocks         string
	Pages          string
	PageProperties string
	PageTemplates  string
	Users          string
}{
	Blocks:         "block",
	Pages:          "page",
	PageProperties: "page_property",
	PageTemplates:  "page_template",
	Users:          "user",
}

var ColumnNames = struct {
	Blocks         blockColumnNames
	Pages          pageColumnNames
	PageProperties pagePropertyColumnNames
	PageTemplates  pageTemplateColumnNames
	Users          userColumnNames
}{
	Blocks: blockColumnNames{
		ID:        "id",
		PageID:    "page_id",
		Type:      "type",
		Content:   "content",
		Position:  "position",
		CreatedAt: "created_at",
		UpdatedAt: "updated_at",
	},
	Pages: pageColumnNames{
		ID:        "id",
		Title:     "title",
		UserID:    "user_id",
		ParentID:  "parent_id",
		CreatedAt: "created_at",
		UpdatedAt: "updated_at",
	},
	PageProperties: pagePropertyColumnNames{
		ID:        "id",
		PageID:    "page_id",
		Name:      "name",
		Value:     "value",
		CreatedAt: "created_at",
		UpdatedAt: "updated_at",
	},
	PageTemplates: pageTemplateColumnNames{
		ID:        "id",
		Name:      "name",
		Structure: "structure",
		CreatedAt: "created_at",
		UpdatedAt: "updated_at",
	},
	Users: userColumnNames{
		ID:        "id",
		Username:  "username",
		Email:     "email",
		Password:  "password",
		CreatedAt: "created_at",
		UpdatedAt: "updated_at",
	},
}

var (
	SelectWhere = Where[*dialect.SelectQuery]()
	InsertWhere = Where[*dialect.InsertQuery]()
	UpdateWhere = Where[*dialect.UpdateQuery]()
	DeleteWhere = Where[*dialect.DeleteQuery]()
)

func Where[Q sqlite.Filterable]() struct {
	Blocks         blockWhere[Q]
	Pages          pageWhere[Q]
	PageProperties pagePropertyWhere[Q]
	PageTemplates  pageTemplateWhere[Q]
	Users          userWhere[Q]
} {
	return struct {
		Blocks         blockWhere[Q]
		Pages          pageWhere[Q]
		PageProperties pagePropertyWhere[Q]
		PageTemplates  pageTemplateWhere[Q]
		Users          userWhere[Q]
	}{
		Blocks:         BlockWhere[Q](),
		Pages:          PageWhere[Q](),
		PageProperties: PagePropertyWhere[Q](),
		PageTemplates:  PageTemplateWhere[Q](),
		Users:          UserWhere[Q](),
	}
}

var (
	SelectJoins = getJoins[*dialect.SelectQuery]
	UpdateJoins = getJoins[*dialect.UpdateQuery]
)

type joinSet[Q any] struct {
	InnerJoin Q
	LeftJoin  Q
	RightJoin Q
}

type joins[Q dialect.Joinable] struct {
	Blocks         joinSet[blockRelationshipJoins[Q]]
	Pages          joinSet[pageRelationshipJoins[Q]]
	PageProperties joinSet[pagePropertyRelationshipJoins[Q]]
	Users          joinSet[userRelationshipJoins[Q]]
}

func getJoins[Q dialect.Joinable](ctx context.Context) joins[Q] {
	return joins[Q]{
		Blocks:         blocksJoin[Q](ctx),
		Pages:          pagesJoin[Q](ctx),
		PageProperties: pagePropertiesJoin[Q](ctx),
		Users:          usersJoin[Q](ctx),
	}
}

// Code generated by BobGen sqlite v0.25.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"errors"
	"fmt"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/clause"
	"github.com/stephenafamo/bob/dialect/sqlite"
	"github.com/stephenafamo/bob/dialect/sqlite/dialect"
	"github.com/stephenafamo/bob/dialect/sqlite/im"
	"github.com/stephenafamo/bob/dialect/sqlite/sm"
	"github.com/stephenafamo/bob/dialect/sqlite/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
)

// Block is an object representing the database table.
type Block struct {
	ID        int32            `db:"id,pk" `
	PageID    int32            `db:"page_id" `
	Type      string           `db:"type" `
	Content   null.Val[string] `db:"content" `
	Position  int32            `db:"position" `
	CreatedAt time.Time        `db:"created_at" `
	UpdatedAt time.Time        `db:"updated_at" `

	R blockR `db:"-" `
}

// BlockSlice is an alias for a slice of pointers to Block.
// This should almost always be used instead of []*Block.
type BlockSlice []*Block

// Blocks contains methods to work with the blocks table
var Blocks = sqlite.NewTablex[*Block, BlockSlice, *BlockSetter]("", "blocks")

// BlocksQuery is a query on the blocks table
type BlocksQuery = *sqlite.ViewQuery[*Block, BlockSlice]

// BlocksStmt is a prepared statment on blocks
type BlocksStmt = bob.QueryStmt[*Block, BlockSlice]

// blockR is where relationships are stored.
type blockR struct {
	Page *Page // fk_blocks_0
}

// BlockSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type BlockSetter struct {
	ID        omit.Val[int32]      `db:"id,pk"`
	PageID    omit.Val[int32]      `db:"page_id"`
	Type      omit.Val[string]     `db:"type"`
	Content   omitnull.Val[string] `db:"content"`
	Position  omit.Val[int32]      `db:"position"`
	CreatedAt omit.Val[time.Time]  `db:"created_at"`
	UpdatedAt omit.Val[time.Time]  `db:"updated_at"`
}

func (s BlockSetter) SetColumns() []string {
	vals := make([]string, 0, 7)
	if !s.ID.IsUnset() {
		vals = append(vals, "id")
	}

	if !s.PageID.IsUnset() {
		vals = append(vals, "page_id")
	}

	if !s.Type.IsUnset() {
		vals = append(vals, "type")
	}

	if !s.Content.IsUnset() {
		vals = append(vals, "content")
	}

	if !s.Position.IsUnset() {
		vals = append(vals, "position")
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, "created_at")
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s BlockSetter) Overwrite(t *Block) {
	if !s.ID.IsUnset() {
		t.ID, _ = s.ID.Get()
	}
	if !s.PageID.IsUnset() {
		t.PageID, _ = s.PageID.Get()
	}
	if !s.Type.IsUnset() {
		t.Type, _ = s.Type.Get()
	}
	if !s.Content.IsUnset() {
		t.Content, _ = s.Content.GetNull()
	}
	if !s.Position.IsUnset() {
		t.Position, _ = s.Position.Get()
	}
	if !s.CreatedAt.IsUnset() {
		t.CreatedAt, _ = s.CreatedAt.Get()
	}
	if !s.UpdatedAt.IsUnset() {
		t.UpdatedAt, _ = s.UpdatedAt.Get()
	}
}

func (s BlockSetter) InsertMod() bob.Mod[*dialect.InsertQuery] {
	vals := make([]bob.Expression, 0, 7)
	if !s.ID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.ID))
	}

	if !s.PageID.IsUnset() {
		vals = append(vals, sqlite.Arg(s.PageID))
	}

	if !s.Type.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Type))
	}

	if !s.Content.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Content))
	}

	if !s.Position.IsUnset() {
		vals = append(vals, sqlite.Arg(s.Position))
	}

	if !s.CreatedAt.IsUnset() {
		vals = append(vals, sqlite.Arg(s.CreatedAt))
	}

	if !s.UpdatedAt.IsUnset() {
		vals = append(vals, sqlite.Arg(s.UpdatedAt))
	}

	return im.Values(vals...)
}

func (s BlockSetter) Apply(q *dialect.UpdateQuery) {
	um.Set(s.Expressions()...).Apply(q)
}

func (s BlockSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 7)

	if !s.ID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "id")...),
			sqlite.Arg(s.ID),
		}})
	}

	if !s.PageID.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "page_id")...),
			sqlite.Arg(s.PageID),
		}})
	}

	if !s.Type.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "type")...),
			sqlite.Arg(s.Type),
		}})
	}

	if !s.Content.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "content")...),
			sqlite.Arg(s.Content),
		}})
	}

	if !s.Position.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "position")...),
			sqlite.Arg(s.Position),
		}})
	}

	if !s.CreatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "created_at")...),
			sqlite.Arg(s.CreatedAt),
		}})
	}

	if !s.UpdatedAt.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			sqlite.Quote(append(prefix, "updated_at")...),
			sqlite.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

type blockColumnNames struct {
	ID        string
	PageID    string
	Type      string
	Content   string
	Position  string
	CreatedAt string
	UpdatedAt string
}

type blockRelationshipJoins[Q dialect.Joinable] struct {
	Page bob.Mod[Q]
}

func buildBlockRelationshipJoins[Q dialect.Joinable](ctx context.Context, typ string) blockRelationshipJoins[Q] {
	return blockRelationshipJoins[Q]{
		Page: blocksJoinPage[Q](ctx, typ),
	}
}

func blocksJoin[Q dialect.Joinable](ctx context.Context) joinSet[blockRelationshipJoins[Q]] {
	return joinSet[blockRelationshipJoins[Q]]{
		InnerJoin: buildBlockRelationshipJoins[Q](ctx, clause.InnerJoin),
		LeftJoin:  buildBlockRelationshipJoins[Q](ctx, clause.LeftJoin),
		RightJoin: buildBlockRelationshipJoins[Q](ctx, clause.RightJoin),
	}
}

var BlockColumns = struct {
	ID        sqlite.Expression
	PageID    sqlite.Expression
	Type      sqlite.Expression
	Content   sqlite.Expression
	Position  sqlite.Expression
	CreatedAt sqlite.Expression
	UpdatedAt sqlite.Expression
}{
	ID:        sqlite.Quote("blocks", "id"),
	PageID:    sqlite.Quote("blocks", "page_id"),
	Type:      sqlite.Quote("blocks", "type"),
	Content:   sqlite.Quote("blocks", "content"),
	Position:  sqlite.Quote("blocks", "position"),
	CreatedAt: sqlite.Quote("blocks", "created_at"),
	UpdatedAt: sqlite.Quote("blocks", "updated_at"),
}

type blockWhere[Q sqlite.Filterable] struct {
	ID        sqlite.WhereMod[Q, int32]
	PageID    sqlite.WhereMod[Q, int32]
	Type      sqlite.WhereMod[Q, string]
	Content   sqlite.WhereNullMod[Q, string]
	Position  sqlite.WhereMod[Q, int32]
	CreatedAt sqlite.WhereMod[Q, time.Time]
	UpdatedAt sqlite.WhereMod[Q, time.Time]
}

func BlockWhere[Q sqlite.Filterable]() blockWhere[Q] {
	return blockWhere[Q]{
		ID:        sqlite.Where[Q, int32](BlockColumns.ID),
		PageID:    sqlite.Where[Q, int32](BlockColumns.PageID),
		Type:      sqlite.Where[Q, string](BlockColumns.Type),
		Content:   sqlite.WhereNull[Q, string](BlockColumns.Content),
		Position:  sqlite.Where[Q, int32](BlockColumns.Position),
		CreatedAt: sqlite.Where[Q, time.Time](BlockColumns.CreatedAt),
		UpdatedAt: sqlite.Where[Q, time.Time](BlockColumns.UpdatedAt),
	}
}

// FindBlock retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindBlock(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*Block, error) {
	if len(cols) == 0 {
		return Blocks.Query(
			ctx, exec,
			SelectWhere.Blocks.ID.EQ(IDPK),
		).One()
	}

	return Blocks.Query(
		ctx, exec,
		SelectWhere.Blocks.ID.EQ(IDPK),
		sm.Columns(Blocks.Columns().Only(cols...)),
	).One()
}

// BlockExists checks the presence of a single record by primary key
func BlockExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return Blocks.Query(
		ctx, exec,
		SelectWhere.Blocks.ID.EQ(IDPK),
	).Exists()
}

// PrimaryKeyVals returns the primary key values of the Block
func (o *Block) PrimaryKeyVals() bob.Expression {
	return sqlite.Arg(o.ID)
}

// Update uses an executor to update the Block
func (o *Block) Update(ctx context.Context, exec bob.Executor, s *BlockSetter) error {
	return Blocks.Update(ctx, exec, s, o)
}

// Delete deletes a single Block record with an executor
func (o *Block) Delete(ctx context.Context, exec bob.Executor) error {
	return Blocks.Delete(ctx, exec, o)
}

// Reload refreshes the Block using the executor
func (o *Block) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Blocks.Query(
		ctx, exec,
		SelectWhere.Blocks.ID.EQ(o.ID),
	).One()
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

func (o BlockSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals BlockSetter) error {
	return Blocks.Update(ctx, exec, &vals, o...)
}

func (o BlockSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	return Blocks.Delete(ctx, exec, o...)
}

func (o BlockSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	var mods []bob.Mod[*dialect.SelectQuery]

	IDPK := make([]int32, len(o))

	for i, o := range o {
		IDPK[i] = o.ID
	}

	mods = append(mods,
		SelectWhere.Blocks.ID.In(IDPK...),
	)

	o2, err := Blocks.Query(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, old := range o {
		for _, new := range o2 {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			*old = *new
			break
		}
	}

	return nil
}

func blocksJoinPage[Q dialect.Joinable](ctx context.Context, typ string) bob.Mod[Q] {
	return mods.QueryMods[Q]{
		dialect.Join[Q](typ, Pages.NameAs(ctx)).On(
			PageColumns.ID.EQ(BlockColumns.PageID),
		),
	}
}

// Page starts a query for related objects on pages
func (o *Block) Page(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) PagesQuery {
	return Pages.Query(ctx, exec, append(mods,
		sm.Where(PageColumns.ID.EQ(sqlite.Arg(o.PageID))),
	)...)
}

func (os BlockSlice) Page(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) PagesQuery {
	PKArgs := make([]bob.Expression, len(os))
	for i, o := range os {
		PKArgs[i] = sqlite.ArgGroup(o.PageID)
	}

	return Pages.Query(ctx, exec, append(mods,
		sm.Where(sqlite.Group(PageColumns.ID).In(PKArgs...)),
	)...)
}

func (o *Block) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Page":
		rel, ok := retrieved.(*Page)
		if !ok {
			return fmt.Errorf("block cannot load %T as %q", retrieved, name)
		}

		o.R.Page = rel

		if rel != nil {
			rel.R.Blocks = BlockSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("block has no relationship %q", name)
	}
}

func PreloadBlockPage(opts ...sqlite.PreloadOption) sqlite.Preloader {
	return sqlite.Preload[*Page, PageSlice](orm.Relationship{
		Name: "Page",
		Sides: []orm.RelSide{
			{
				From: "blocks",
				To:   TableNames.Pages,
				ToExpr: func(ctx context.Context) bob.Expression {
					return Pages.Name(ctx)
				},
				FromColumns: []string{
					ColumnNames.Blocks.PageID,
				},
				ToColumns: []string{
					ColumnNames.Pages.ID,
				},
			},
		},
	}, Pages.Columns().Names(), opts...)
}

func ThenLoadBlockPage(queryMods ...bob.Mod[*dialect.SelectQuery]) sqlite.Loader {
	return sqlite.Loader(func(ctx context.Context, exec bob.Executor, retrieved any) error {
		loader, isLoader := retrieved.(interface {
			LoadBlockPage(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
		})
		if !isLoader {
			return fmt.Errorf("object %T cannot load BlockPage", retrieved)
		}

		err := loader.LoadBlockPage(ctx, exec, queryMods...)

		// Don't cause an issue due to missing relationships
		if errors.Is(err, sql.ErrNoRows) {
			return nil
		}

		return err
	})
}

// LoadBlockPage loads the block's Page into the .R struct
func (o *Block) LoadBlockPage(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Page = nil

	related, err := o.Page(ctx, exec, mods...).One()
	if err != nil {
		return err
	}

	related.R.Blocks = BlockSlice{o}

	o.R.Page = related
	return nil
}

// LoadBlockPage loads the block's Page into the .R struct
func (os BlockSlice) LoadBlockPage(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	pages, err := os.Page(ctx, exec, mods...).All()
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range pages {
			if o.PageID != rel.ID {
				continue
			}

			rel.R.Blocks = append(rel.R.Blocks, o)

			o.R.Page = rel
			break
		}
	}

	return nil
}

func attachBlockPage0(ctx context.Context, exec bob.Executor, count int, block0 *Block, page1 *Page) (*Block, error) {
	setter := &BlockSetter{
		PageID: omit.From(page1.ID),
	}

	err := Blocks.Update(ctx, exec, setter, block0)
	if err != nil {
		return nil, fmt.Errorf("attachBlockPage0: %w", err)
	}

	return block0, nil
}

func (block0 *Block) InsertPage(ctx context.Context, exec bob.Executor, related *PageSetter) error {
	page1, err := Pages.Insert(ctx, exec, related)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachBlockPage0(ctx, exec, 1, block0, page1)
	if err != nil {
		return err
	}

	block0.R.Page = page1

	page1.R.Blocks = append(page1.R.Blocks, block0)

	return nil
}

func (block0 *Block) AttachPage(ctx context.Context, exec bob.Executor, page1 *Page) error {
	var err error

	_, err = attachBlockPage0(ctx, exec, 1, block0, page1)
	if err != nil {
		return err
	}

	block0.R.Page = page1

	page1.R.Blocks = append(page1.R.Blocks, block0)

	return nil
}
